/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package dev.koding.argon

import com.kotlindiscord.kord.extensions.ExtensibleBot
import dev.koding.argon.data.config
import dev.koding.argon.extensions.ClockifyExtension
import dev.koding.argon.extensions.FilterExtension
import dev.koding.argon.extensions.Web3Extension
import dev.koding.argon.metrics.MetricManager
import dev.koding.argon.util.Colors
import dev.koding.argon.util.feedback
import dev.kord.common.entity.Snowflake
import dev.kord.core.Kord

lateinit var owners: List<Snowflake>

suspend fun main() {
    configureMetrics()

    val kord = Kord(config.discord.token)
    owners = kord.getApplicationInfo().let { app ->
        app.team?.members?.map { it.userId } ?: listOf(app.ownerId)
    }

    val bot = ExtensibleBot(config.discord.token) {
        applicationCommands {
            enabled = true
            config.discord.guildId?.let { defaultGuild(it) }
        }

        errorResponse { message, type ->
            feedback(type.error.message ?: message) {
                color = Colors.ERROR
            }
        }

        extensions {
            add(::ClockifyExtension)
            add(::FilterExtension)
            add(::Web3Extension)
        }

        config.discord.status?.let { s ->
            presence {
                when (s.type.lowercase()) {
                    "watching" -> watching(s.text)
                    "listening" -> listening(s.text)
                    else -> playing(s.text)
                }
            }
        }
    }

    bot.start()
}

fun configureMetrics() {
    val manager = MetricManager()
    manager.start()
}